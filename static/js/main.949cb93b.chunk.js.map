{"version":3,"sources":["components/Heading.js","components/SongPlayer.js","components/Songs.js","components/SongListItem.js","components/App.js","reportWebVitals.js","index.js"],"names":["Heading","title","className","SongPlayer","showControls","song","audioRef","useRef","audioUrl","coverUrl","width","height","src","alt","ref","controls","onClick","current","play","pause","Songs","children","SongListItem","isCurrent","onSelect","artist","App","useState","songs","setSongs","useEffect","fetch","then","response","ok","json","currentSongIndex","setCurrentSongIndex","currentSong","handleSelectSong","selectedSong","audioIndex","findIndex","length","map","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kTAEO,SAASA,EAAT,GAA6B,IAAVC,EAAS,EAATA,MACxB,OAAO,oBAAIC,UAAU,UAAd,SAAyBD,I,MCC3B,SAASE,EAAT,GAAqD,IAAD,IAA9BC,oBAA8B,SAARC,EAAQ,EAARA,KAC3CC,EAAWC,mBACTC,EAAuBH,EAAvBG,SAAUC,EAAaJ,EAAbI,SAClB,OACE,0BAASP,UAAU,aAAnB,UACE,cAAC,EAAD,CAASD,MAAM,iBACf,qBAAKS,MAAM,MAAMC,OAAO,MAAMC,IAAKH,EAAUI,IAAI,eACjD,uBAAOC,IAAKR,EAAyBS,SAAUX,EAA/C,SACE,wBAAQQ,IAAKJ,KADYA,GAG3B,gCACE,wBAAQQ,QAAS,kBAAMV,EAASW,QAAQC,QAAxC,kBACA,wBAAQF,QAAS,kBAAMV,EAASW,QAAQE,SAAxC,yB,MCdD,SAASC,EAAT,GAA8B,IAAbC,EAAY,EAAZA,SACtB,OACE,yBAASnB,UAAU,QAAnB,SACGmB,I,MCHA,SAASC,EAAT,GAAsD,IAA9BjB,EAA6B,EAA7BA,KAAMkB,EAAuB,EAAvBA,UAAWC,EAAY,EAAZA,SAI9C,OACE,qBAAItB,UAAS,uBAAkBqB,EAAY,WAAa,IAAMP,QAJhE,WACEQ,EAASnB,IAGT,UACGA,EAAKJ,MADR,OACmBI,EAAKoB,U,MCArB,SAASC,IACd,IADoB,EAEMC,mBAAS,IAFf,mBAEbC,EAFa,KAENC,EAFM,KAGpBC,qBAAU,WACRC,MAHU,kDAGCC,MAAK,SAACC,GACXA,EAASC,IACXD,EAASE,OAAOH,KAAKH,QAGxB,IATiB,MAU4BF,mBAAS,GAVrC,mBAUbS,EAVa,KAUKC,EAVL,KAWdC,EAAcV,EAAMQ,GAC1B,SAASG,EAAiBC,GACxB,IAAMC,EAAab,EAAMc,WACvB,SAACrC,GAAD,OAAUA,EAAKG,WAAagC,EAAahC,YAEvCiC,GAAc,GAChBJ,EAAoBI,GAGxB,OACE,qBAAKvC,UAAU,MAAf,SACoB,IAAjB0B,EAAMe,OAAe,aACpB,qCACE,cAAC,EAAD,CACAtC,KAAQiC,IAER,eAAC,EAAD,WACI,cAAC,EAAD,CAASrC,MAAO,UAChB,6BAAK2B,EAAMgB,KAAI,SAAAvC,GAAI,OACjB,cAAC,EAAD,CAEEA,KAAMA,EACNkB,UAAWe,EAAY9B,WAAaH,EAAKG,SACzCgB,SAAUe,GAHLlC,EAAKG,uB,UC3BbqC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBf,MAAK,YAAkD,IAA/CgB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCAdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.949cb93b.chunk.js","sourcesContent":["import './Heading.css';\n\nexport function Heading({ title }) {\n  return <h1 className=\"Heading\">{title}</h1>;\n}\n;\n","import { useRef } from 'react';\nimport { Heading } from './Heading';\nimport './SongPlayer.css';\n\nexport function SongPlayer({ showControls = false, song }) {\n  const audioRef = useRef();\n  const { audioUrl, coverUrl } = song;\n  return (\n    <section className=\"SongPlayer\">\n      <Heading title='Music Player' />\n      <img width=\"250\" height=\"250\" src={coverUrl} alt=\"Song cover\" />\n      <audio ref={audioRef} key={audioUrl} controls={showControls}>\n        <source src={audioUrl} />\n      </audio>\n      <div>\n        <button onClick={() => audioRef.current.play()}>Play</button>\n        <button onClick={() => audioRef.current.pause()}>Pause</button>\n      </div>\n    </section>\n  );\n}\n;\n","import './Songs.css';\n\nexport function Songs({ children }) {\n  return (\n    <section className=\"Songs\">\n      {children}\n    </section>\n  );\n}\n","import './SongListItem.css';\n\nexport function SongListItem({ song, isCurrent, onSelect }) {\n  function handleClick() {\n    onSelect(song);\n  };\n  return (\n    <li className={`SongListItem ${isCurrent ? \"selected\" : \"\"}`} onClick={handleClick}>\n      {song.title} by {song.artist}\n    </li>\n  );\n}\n","import { useState, useEffect,  } from 'react';\nimport { Heading } from './Heading';\nimport { SongPlayer } from './SongPlayer';\nimport { Songs } from './Songs';\nimport { SongListItem } from './SongListItem';\n\nimport './App.css';\n\nexport function App() {\n  const URL = \"https://examples.devmastery.pl/songs-api/songs\";\n  const [songs, setSongs] = useState([]);\n  useEffect(() => {\n    fetch(URL).then((response) => {\n      if (response.ok) {\n        response.json().then(setSongs)\n      }\n    })\n  }, []);\n  const [currentSongIndex, setCurrentSongIndex] = useState(0);\n  const currentSong = songs[currentSongIndex];\n  function handleSelectSong(selectedSong) {\n    const audioIndex = songs.findIndex(\n      (song) => song.audioUrl === selectedSong.audioUrl\n    );\n    if (audioIndex >= 0) {\n      setCurrentSongIndex(audioIndex);\n    }\n  };\n  return (\n    <div className=\"App\">\n      {songs.length === 0 ? \"Loading...\" : (\n        <>\n          <SongPlayer \n          song = {currentSong}\n          />\n          <Songs>\n              <Heading title={\"Songs\"} />\n              <ul>{songs.map(song => \n                <SongListItem \n                  key={song.audioUrl}\n                  song={song}\n                  isCurrent={currentSong.audioUrl === song.audioUrl}\n                  onSelect={handleSelectSong} />\n              )}</ul>\n            </Songs>\n        </>)\n      }\n    </div>\n  );\n};\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { App } from './components/App';\nimport './style.css';\n\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}